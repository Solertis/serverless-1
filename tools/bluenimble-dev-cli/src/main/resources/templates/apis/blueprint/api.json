/**
 * 
 * This is where you write your api specification.
 * Spec:
 *  <namespace> A unique name under the space where this api will be installed. (Required)
 *				The api namespace is part of the uri when calling a service within this api. 
 *				Example using http GET https://bluenimble-instance/my-company/{namespace}/users/100 
 *				Where 
 *				 - my-company is the space defined in the bluenimble instance
 *				 - {namespace} is the api namespace
 *  <name> 		A user friendly name, such as 'Home IoT Devices'  (Optional)
 *  <description> 
 *				A verbose description of what's this api stands for. (Optional)
 *  <runtime> 	A section to define extra application specific data to be used at runtime by all services. (Required for javascript) 
 *				For javascript developers, the meta section may define the 'script' to execute by this api -if any- 
 *  <security> 	In this section, you can define which security methods are supported by this api. (Optional)
 *				bluenimble out-of-the-box security methods are 'token', 'basic', 'cookie', 'signature'. Here is an example of an 
 *				api supporting all security methods:
 *   			"security": {
 *					"methods": {
 *						"token": 		{}, // useful for IoT, mobile and single-page web applications
 *						"signature": 	{ "application": "Bearer", "validity": "5", "timestampHeader": "BlueNimble-Timestamp" }, // useful for IoT and application integration 
 *										 // application is the Authorization header token. Defaults to 'Bearer'
 *										 // validity is time in minutes for the signature to expire. Defaults to '5'
 *										 // timestampHeader is the request header where to find the request timestamp. Defaults to 'BlueNimble-Timestamp' 
 *						"basic": 		{}, // useful for mobile and web applications
 *						"cookie": 		{ "name": "suuid" } // useful for web applications
 *										 // name is the name of the cookie. Default is 'suuid'
 *										 // The login/signup 
 *					}
 *				}
 *				Note: 
 *					- The api can bypass all security methods implement a custom authentication algorithm in the Api.findConsumer function.
 *  <spi>   	Which scripting language and implementation to use. (Required)
 *				for javascript developers it's always "class": "scripting.javascript:ApiSpi"
 *   
 *	@author		{user}
 *	@created	{date}
 * 
 **/

{
	"namespace": 	"{namespace}",
	
	"name": 		"{namespace} api",
	"description": 	"{namespace} description",
	
	"runtime": {
		"script": "scripts/Api.js"
	},

	"spi": {
		"class": "scripting.javascript:ApiSpi"
	}
	
}